const express = require('express');
const router = express.Router();
const User = require('../models/user');
const { xacThuc } = require('../middleware/auth');
const { kiemTraQuyenAdmin, kiemTraQuyenXoaUser } = require('../middleware/rbac');

// L·∫•y danh s√°ch user (ch·ªâ Admin)
router.get('/', xacThuc, kiemTraQuyenAdmin, async (req, res) => {
  try {
    console.log('üîç Admin ƒëang xem danh s√°ch user:', req.userInfo.email);
    const users = await User.find().select('-password').sort({ createdAt: -1 });
    res.json({
      message: 'L·∫•y danh s√°ch user th√†nh c√¥ng',
      users: users,
      total: users.length
    });
  } catch (err) {
    console.error('L·ªói khi l·∫•y danh s√°ch user:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch user' });
  }
});

// Th√™m user m·ªõi
router.post('/', async (req, res) => {
  try {
    console.log("üì© D·ªØ li·ªáu nh·∫≠n t·ª´ client:", req.body);

    const { name, email, age } = req.body;

    if (!name || !email) {
      return res.status(400).json({ message: 'name v√† email l√† b·∫Øt bu·ªôc' });
    }

    // √âp ki·ªÉu age v√† ki·ªÉm tra
    const ageNum = (age === "" || age === undefined || age === null) ? undefined : Number(age);
    if (ageNum === undefined || Number.isNaN(ageNum)) {
      return res.status(400).json({ message: 'Tu·ªïi l√† b·∫Øt bu·ªôc v√† ph·∫£i l√† s·ªë' });
    }

    const newUser = new User({ name, email, age: ageNum });
    const savedUser = await newUser.save(); // ‚úÖ L∆∞u v√†o MongoDB
    res.status(201).json(savedUser);        // ‚úÖ Tr·∫£ v·ªÅ document
  } catch (err) {
    console.error("L·ªói khi th√™m user:", err);
    // tr·∫£ l·ªói chi ti·∫øt n·∫øu l√† validation error
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: err.message, errors: err.errors });
    }
    res.status(500).json({ message: err.message });
  }
});
router.put('/:id', async (req, res) => {
  try {
    console.log('üì© PUT /users/:id params:', req.params);
    console.log('üì© PUT /users/:id body:', req.body);

    const { id } = req.params;
    const { name, email, age } = req.body;

    if (!name || !email) {
      return res.status(400).json({ message: 'name v√† email l√† b·∫Øt bu·ªôc' });
    }

    const ageNum = (age === "" || age === undefined || age === null) ? undefined : Number(age);
    if (ageNum === undefined || Number.isNaN(ageNum)) {
      return res.status(400).json({ message: 'Tu·ªïi l√† b·∫Øt bu·ªôc v√† ph·∫£i l√† s·ªë' });
    }

    const updated = await User.findByIdAndUpdate(
      id,
      { name, email, age: ageNum },
      { new: true, runValidators: true }
    );

    if (!updated) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
    return res.json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng', user: updated });
  } catch (err) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t user:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: err.message, errors: err.errors });
    }
    res.status(500).json({ message: err.message });
  }
});

// X√≥a user theo id (Admin ho·∫∑c t·ª± x√≥a)
router.delete('/:id', xacThuc, kiemTraQuyenXoaUser, async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üóëÔ∏è X√≥a user v·ªõi ID:', id, 'b·ªüi:', req.userInfo.email);
    
    // T√¨m user c·∫ßn x√≥a
    const userToDelete = await User.findById(id);
    if (!userToDelete) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y user ƒë·ªÉ x√≥a' });
    }

    // Admin kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh
    if (req.userInfo.role === 'admin' && req.userInfo._id.toString() === id) {
      return res.status(400).json({ 
        message: 'Admin kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n c·ªßa ch√≠nh m√¨nh' 
      });
    }

    // Th·ª±c hi·ªán x√≥a
    const deleted = await User.findByIdAndDelete(id);
    console.log('‚úÖ ƒê√£ x√≥a user:', deleted.email);
    
    return res.json({ 
      message: 'X√≥a user th√†nh c√¥ng', 
      deletedUser: {
        id: deleted._id,
        name: deleted.name,
        email: deleted.email,
        role: deleted.role
      }
    });
  } catch (err) {
    console.error('L·ªói khi x√≥a user:', err);
    res.status(500).json({ message: 'L·ªói server khi x√≥a user' });
  }
});

module.exports = router;
