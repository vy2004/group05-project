const crypto = require('crypto');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const User = require('../models/user');

// C·∫•u h√¨nh email transporter
const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER || 'your-email@gmail.com',
      pass: process.env.EMAIL_PASSWORD || 'your-app-password'
    }
  });
};

// G·ª≠i email reset password
const guiEmailResetPassword = async (email, resetToken) => {
  try {
    const resetURL = `http://localhost:3001/reset-password?token=${resetToken}`;
    
    console.log('üîê RESET PASSWORD TOKEN:');
    console.log('Email:', email);
    console.log('Token:', resetToken);
    console.log('Reset URL:', resetURL);
    console.log('==========================================');
    
    // Th·ª≠ g·ª≠i email th·∫≠t
    try {
      console.log('üìß ƒêang c·∫•u h√¨nh email transporter...');
      console.log('EMAIL_USER:', process.env.EMAIL_USER);
      console.log('EMAIL_PASSWORD:', process.env.EMAIL_PASSWORD ? '***' : 'undefined');
      
      const transporter = createTransporter();
      
      const mailOptions = {
        from: process.env.EMAIL_USER || 'your-email@gmail.com',
        to: email,
        subject: 'üîê Reset M·∫≠t Kh·∫©u - Group05 Project',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333;">üîê Reset M·∫≠t Kh·∫©u</h2>
            <p>Xin ch√†o,</p>
            <p>B·∫°n ƒë√£ y√™u c·∫ßu reset m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh.</p>
            <p>Vui l√≤ng click v√†o link b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
            <a href="${resetURL}" style="background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
              Reset M·∫≠t Kh·∫©u
            </a>
            <p>Link n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu reset m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
            <br>
            <p>Tr√¢n tr·ªçng,<br>Team Group05</p>
          </div>
        `
      };

      console.log('üì§ ƒêang g·ª≠i email...');
      await transporter.sendMail(mailOptions);
      console.log('‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
      return true;
    } catch (emailError) {
      console.error('‚ùå L·ªói g·ª≠i email:', emailError.message);
      console.error('‚ùå Chi ti·∫øt l·ªói:', emailError);
      console.log('üìù Token v·∫´n ƒë∆∞·ª£c t·∫°o, b·∫°n c√≥ th·ªÉ copy link sau ƒë·ªÉ test:');
      console.log('üîó', resetURL);
      return true; // V·∫´n tr·∫£ v·ªÅ true ƒë·ªÉ test ƒë∆∞·ª£c
    }
  } catch (error) {
    console.error('L·ªói g·ª≠i email:', error);
    return false;
  }
};

// Qu√™n m·∫≠t kh·∫©u - g·ª≠i token reset
const quenMatKhau = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Email l√† b·∫Øt bu·ªôc'
      });
    }

    // T√¨m user theo email
    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y'
      });
    }

    // T·∫°o reset token
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t

    // L∆∞u token v√†o database
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = resetTokenExpiry;
    await user.save();

    // G·ª≠i email
    const emailSent = await guiEmailResetPassword(email, resetToken);
    
    if (emailSent) {
      res.status(200).json({
        success: true,
        message: 'Email reset m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.'
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'L·ªói khi g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.'
      });
    }

  } catch (error) {
    console.error('L·ªói quen mat khau:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.'
    });
  }
};

// Reset m·∫≠t kh·∫©u v·ªõi token
const resetMatKhau = async (req, res) => {
  try {
    const { token, newPassword } = req.body;

    if (!token || !newPassword) {
      return res.status(400).json({
        success: false,
        message: 'Token v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc'
      });
    }

    // T√¨m user v·ªõi token h·ª£p l·ªá
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({
        success: false,
        message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'
      });
    }

    // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u
    if (newPassword.length < 6) {
      return res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
      });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√† x√≥a token
    user.password = hashedPassword;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    res.status(200).json({
      success: true,
      message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('L·ªói reset mat khau:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.'
    });
  }
};

module.exports = {
  quenMatKhau,
  resetMatKhau
};
