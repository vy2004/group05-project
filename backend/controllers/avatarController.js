const cloudinary = require('cloudinary').v2;
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');
const User = require('../models/user');

// C·∫•u h√¨nh Cloudinary
const {
  CLOUDINARY_CLOUD_NAME,
  CLOUDINARY_API_KEY,
  CLOUDINARY_API_SECRET
} = process.env;

if (!CLOUDINARY_CLOUD_NAME || !CLOUDINARY_API_KEY || !CLOUDINARY_API_SECRET) {
  console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Cloudinary trong bi·∫øn m√¥i tr∆∞·ªùng .env', {
    CLOUDINARY_CLOUD_NAME,
    CLOUDINARY_API_KEY: CLOUDINARY_API_KEY ? CLOUDINARY_API_KEY.slice(0, 4) + '***' : undefined,
    CLOUDINARY_API_SECRET: CLOUDINARY_API_SECRET ? '***' : undefined
  });
}

cloudinary.config({
  cloud_name: CLOUDINARY_CLOUD_NAME,
  api_key: CLOUDINARY_API_KEY,
  api_secret: CLOUDINARY_API_SECRET
});

// Upload avatar l√™n Cloudinary
const taiLenAvatar = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ch·ªçn file ·∫£nh ƒë·ªÉ upload'
      });
    }

    const userId = req.user.userId || req.user.id || req.user._id;

    console.log('üì∏ UPLOAD AVATAR:');
    console.log('User ID:', userId);
    console.log('User object:', req.user);
    console.log('File:', req.file);
    console.log('==========================================');

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
      });
    }

    // Ki·ªÉm tra xem c√≥ c·∫•u h√¨nh Cloudinary kh√¥ng
    let avatarUrl;
    let resizedFilePath = null;
    
    if (CLOUDINARY_CLOUD_NAME && CLOUDINARY_API_KEY && CLOUDINARY_API_SECRET) {
      // S·ª≠ d·ª•ng Sharp ƒë·ªÉ resize ·∫£nh tr∆∞·ªõc khi upload l√™n Cloudinary
      const resizedFileName = `avatar-resized-${Date.now()}-${Math.round(Math.random() * 1E9)}.jpg`;
      resizedFilePath = path.join('uploads', resizedFileName);
      
      try {
        // Resize ·∫£nh v·ªÅ 300x300px v·ªõi crop fill v√† t·ªëi ∆∞u ch·∫•t l∆∞·ª£ng
        await sharp(req.file.path)
          .resize(300, 300, {
            fit: 'cover',
            position: 'center'
          })
          .jpeg({ quality: 85, mozjpeg: true })
          .toFile(resizedFilePath);
        
        console.log('‚úÖ ƒê√£ resize ·∫£nh th√†nh c√¥ng:', resizedFilePath);
        
        // Upload ·∫£nh ƒë√£ resize l√™n Cloudinary
        const result = await cloudinary.uploader.upload(resizedFilePath, {
          folder: 'group05-avatars',
          transformation: [
            { quality: 'auto' }
          ]
        });
        avatarUrl = result.secure_url;
        
        console.log('‚úÖ ƒê√£ upload l√™n Cloudinary:', avatarUrl);
        
        // X√≥a file t·∫°m sau khi upload l√™n Cloudinary
        try {
          fs.unlinkSync(req.file.path);
          if (resizedFilePath && fs.existsSync(resizedFilePath)) {
            fs.unlinkSync(resizedFilePath);
          }
        } catch (unlinkErr) {
          console.warn('‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a file t·∫°m, b·ªè qua:', unlinkErr?.message);
        }
      } catch (sharpError) {
        console.error('‚ùå L·ªói khi resize ·∫£nh v·ªõi Sharp:', sharpError);
        // Fallback: upload file g·ªëc n·∫øu Sharp l·ªói
        const result = await cloudinary.uploader.upload(req.file.path, {
          folder: 'group05-avatars',
          transformation: [
            { width: 300, height: 300, crop: 'fill', gravity: 'face' },
            { quality: 'auto' }
          ]
        });
        avatarUrl = result.secure_url;
        
        // X√≥a file t·∫°m
        try {
          fs.unlinkSync(req.file.path);
        } catch (unlinkErr) {
          console.warn('‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a file t·∫°m, b·ªè qua:', unlinkErr?.message);
        }
      }
    } else {
      // S·ª≠ d·ª•ng Sharp resize v√† l∆∞u local n·∫øu kh√¥ng c√≥ Cloudinary
      console.log('‚ö†Ô∏è  Cloudinary ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng avatar local');
      
      try {
        const resizedFileName = `avatar-${Date.now()}-${Math.round(Math.random() * 1E9)}.jpg`;
        resizedFilePath = path.join('uploads', resizedFileName);
        
        await sharp(req.file.path)
          .resize(300, 300, {
            fit: 'cover',
            position: 'center'
          })
          .jpeg({ quality: 85, mozjpeg: true })
          .toFile(resizedFilePath);
        
        // X√≥a file g·ªëc
        try {
          fs.unlinkSync(req.file.path);
        } catch (unlinkErr) {
          console.warn('‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a file g·ªëc, b·ªè qua:', unlinkErr?.message);
        }
        
        avatarUrl = `http://localhost:3000/uploads/${resizedFileName}`;
        console.log('‚úÖ ƒê√£ resize v√† l∆∞u avatar local:', avatarUrl);
      } catch (sharpError) {
        console.error('‚ùå L·ªói khi resize ·∫£nh v·ªõi Sharp:', sharpError);
        // Fallback: s·ª≠ d·ª•ng file g·ªëc
        const fileName = req.file.filename;
        avatarUrl = `http://localhost:3000/uploads/${fileName}`;
      }
    }

    // C·∫≠p nh·∫≠t avatar URL trong database
    const user = await User.findByIdAndUpdate(
      userId,
      { avatar: avatarUrl },
      { new: true }
    );

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    res.status(200).json({
      success: true,
      message: 'Upload avatar th√†nh c√¥ng',
      data: {
        avatar: avatarUrl,
        user: {
          id: user._id,
          name: user.name,
          email: user.email,
          avatar: user.avatar,
          role: user.role,
          age: user.age,
          createdAt: user.createdAt,
          updatedAt: user.updatedAt
        }
      }
    });

  } catch (error) {
    console.error('L·ªói upload avatar:', error);
    
    // X√≥a file t·∫°m n·∫øu c√≥ l·ªói
    if (req.file && fs.existsSync(req.file.path)) {
      try {
        fs.unlinkSync(req.file.path);
      } catch (unlinkError) {
        console.error('L·ªói x√≥a file t·∫°m:', unlinkError);
      }
    }
    
    // X√≥a file ƒë√£ resize n·∫øu c√≥
    if (resizedFilePath && fs.existsSync(resizedFilePath)) {
      try {
        fs.unlinkSync(resizedFilePath);
      } catch (unlinkError) {
        console.error('L·ªói x√≥a file ƒë√£ resize:', unlinkError);
      }
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server khi upload avatar. Vui l√≤ng th·ª≠ l·∫°i sau.',
      detail: error?.message || undefined
    });
  }
};

// X√≥a avatar (ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh)
const xoaAvatar = async (req, res) => {
  try {
    const userId = req.user.userId || req.user.id || req.user._id;

    // C·∫≠p nh·∫≠t avatar v·ªÅ r·ªóng
    const user = await User.findByIdAndUpdate(
      userId,
      { avatar: '' },
      { new: true }
    );

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    res.status(200).json({
      success: true,
      message: 'ƒê√£ x√≥a avatar th√†nh c√¥ng',
      data: {
        user: {
          id: user._id,
          name: user.name,
          email: user.email,
          avatar: user.avatar
        }
      }
    });

  } catch (error) {
    console.error('L·ªói x√≥a avatar:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.'
    });
  }
};

module.exports = {
  taiLenAvatar,
  xoaAvatar
};
